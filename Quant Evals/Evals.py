# -*- coding: utf-8 -*-
"""Eval_Metrics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s5j3ZhK8aHtvOn2ftBSorSL_jVdyDB9R
"""

#@title Manual Calculation
import numpy as np
from keras.applications.inception_v3 import InceptionV3, preprocess_input
from keras.preprocessing import image
from scipy.linalg import sqrtm
from sklearn.metrics.pairwise import polynomial_kernel
import os

# Load the InceptionV3 model
model = InceptionV3(include_top=False, pooling='avg', input_shape=(299, 299, 3))

def load_and_preprocess_images(directory):
    images = []
    for filename in os.listdir(directory):
        if filename.endswith('.jpg') or filename.endswith('.jpeg') or filename.endswith('.png'):
            img_path = os.path.join(directory, filename)
            img = image.load_img(img_path, target_size=(299, 299))
            img = image.img_to_array(img)
            img = np.expand_dims(img, axis=0)
            img = preprocess_input(img)
            images.append(img)
    print("Directory", len(images))
    return np.vstack(images)

def calculate_fid(model, real_images, fake_images):
    # Calculate activations
    act1 = model.predict(real_images)
    act2 = model.predict(fake_images)

    # Calculate mean and covariance with a small regularization term
    epsilon = 1e-6
    mu1, sigma1 = act1.mean(axis=0), np.cov(act1, rowvar=False) + epsilon * np.identity(act1.shape[1])
    mu2, sigma2 = act2.mean(axis=0), np.cov(act2, rowvar=False) + epsilon * np.identity(act2.shape[1])

    # Compute the FID
    ssdiff = np.sum((mu1 - mu2) ** 2.0)
    covmean, _ = sqrtm(sigma1.dot(sigma2), disp=False)
    if np.iscomplexobj(covmean):
        covmean = covmean.real

    fid = ssdiff + np.trace(sigma1 + sigma2 - 2.0 * covmean)
    fid = max(ssdiff + np.trace(sigma1 + sigma2 - 2.0 * covmean), 0)
    return fid

def calculate_kid(model, real_images, fake_images):
    # Calculate activations
    act1 = model.predict(real_images)
    act2 = model.predict(fake_images)

    # Compute kernel matrix
    kernel_real = polynomial_kernel(act1)
    kernel_fake = polynomial_kernel(act2)
    kernel_real_fake = polynomial_kernel(act1, act2)

    # Compute the KID
    m = kernel_real.shape[0]
    n = kernel_fake.shape[0]
    kid = np.mean(kernel_real) + np.mean(kernel_fake) - 2 * np.mean(kernel_real_fake)
    return kid

# Load your images
real_images = '/content/drive/MyDrive/236/mrbeast_test' #@param
fake_images = '/content/fake' #@param
real_images = load_and_preprocess_images(real_images)
fake_images = load_and_preprocess_images(fake_images)

# Calculate FID and KID
fid = calculate_fid(model, real_images, fake_images)
kid = calculate_kid(model, real_images, fake_images)

print("FID:", fid)
print("KID:", kid)
